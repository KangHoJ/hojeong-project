SQL -> DQL , DDL , DCL , DML


DQL -> 테이블 조회
DDL -> CREATE(생성),ALTER(수정),DROP(삭제)
DCL -> GRANT(승인) , REVOKE(제약)
DML -> INSERT(삽입),UPDATE(수정),DELETE(삭제)


< MariaDB server 데이터 타입>
CHAR -> 고정된 길이의 문자열 저장
VARCHAR -> 가변 문자열 저장
TEXT -> 매우 큰 문자열 저장
INT , BIGINT , FLOAT , DECIMAL ,DATATIME


-------------------------------------------------------------

sql 코드 

<테이블 접근>
desc mysql.user;     .은 테이블을 접근가능(user라는 테이블안에 field들 볼 수 있음)
show columns from mysql.user;        # my sql DB의 user 테이블 columns 확인
show full columns from mysql.user;   # my sql DB의 user 테이블 모든 columns 확인 
select user , host from mysql.user;  # my sql DB user,host 테이블 확인


desc mysql.user; #                          #.으로 테이블 접근 가능 
show columns from mysql.user;        # my sql DB의 user 테이블 columns 확인
show full columns from mysql.user;   # my sql DB의 user 테이블 모든 columns 확인 
select user , host from mysql.user;    # my sql DB user,host columns 확인

#---------------------------------DDL->create(생성)----------------------------------------------
create user 'test'@'localhost'identified by '1234'; 
# host 열에 localhost(접근주소)추가하고,user열에 test추가하고 password 1234 인 테이블 만듬
create user 'anywhere'@'%'identified by '1234'; 
# 어디서든 접속가능한 사용자를 만듬
create user 'test2'@'192.168.0.%'identified by '1234';  
# 192.168.0 에만 접속가능한 사용자

create or replace user 'test'@'localhost' identified by '1234'; 
# 이미 존재하면 기존것을 삭제하고 다시 만듬 
create user if not exists 'test'@'localhost' identified by '1234';
# 존재하지 않을떄만 넣겠다


#-----------------------------------DDL->변경,삭제----------------------------------------------
rename user 'test2'@'192.168.0.%' to 'test3'@'%';               # test2@192.168.0 을 test3@% 로 번경한다.
SET PASSWORD FOR 'test3'@'%' = PASSWORD( '12345' );    # 'test3'@'%' 비밀번호를 12345로 변경
drop user 'test3'@'%';                                                  # 'test3'@'%' 사용자를 삭제함
drop user if exists'anywhere'@'%';                                  # 'anywhere'@'%' 사용자를 삭제함(존재할 경우에만 삭제)
#-----------------------------------DCL-> 권한-------------------------------------------------
grant all privileges on test.* tO'test'@'localhost' ;
flush privileges;
show grants for 'test'@'localhost' ;
# test라는 user에게 test DB 전체 권한을 부여

revoke all on test.* from'test'@'localhost';
flush privileges;
show grants for 'test'@'localhost';
# test라는 유저가 test DB 에 관한 권한 모두 제거 

#----------------------------------------DML -----------------------------------------------------
show databases;                        # DB 조회
create database `test.test`;           # DB 생성
drop database `test.test`;             # DB 삭제

create database python;                # python DB 생성
USE python;                            # 앞으로 python DB 안에만 찾을거다 (범위 축소)
select database();                     # 현재 사용중인 데이터베이스 확인



#----------------테이블 조작(생성,삭제,조회)-----------------------------
show tables;                           # 현재 사용중인 데이터베이스중 어떤 테이블이 있는지 조회
create Table table1(column1 varchar(100));
# 이름은 column1을열로 가지는 table1을 만들기 크기는 100
rename table table1 To table2;         # table1 -> table2 이름 변경
drop Table table2;                     # table2 삭제 


CREATE TABLE test_table (           
test_column1 INT,
test_column2 INT,
test_column3 INT
);                                     #column1 , column2 , column3 필드열을 가지는 test_table 만듬
DESC test_table;                       # test_table 테이블 필드 조회

alter Table test_table              
add (
test_column5 int,
test_column6 int,
test_column7 int
);   							       # columns5,6,7 추가   					

alter Table test_table               
drop test_column1;                     # test_column1 삭제


#----------------------<테이블 조작(위치)>-----------------------------
alter Table test_table
modify test_column7 int
first;                                   # column7 을 가장 앞으로 보내준다 

alter Table test_table
modify test_column7 int
after test_column6;                      # column7 을 column6 뒤로 보내준다 

#---------------------<테이블 조작(변경)>------------------------------
alter Table test_table
change test_column2 test_column0 int ;   #colum2 이름을 column0으로 바꾼다

ALTER TABLE test_table
CHANGE test_column0 test_column0 VARCHAR(10); # column 타입을 변경 
desc test_table;

alter table test_table
change test_column0 test_column2 int;      # 이름 , 타입 둘다 변경 
desc test_table;

#-----------------------자동 생성 ----------------------------
CREATE TABLE test ( id INT AUTO_INCREMENT PRIMARY KEY );
INSERT INTO test VALUES ();            # insert into '(필드)''테이블' values ('값')
# id라는 column 밖에 없어서 test 앞에 column 쓰는건 생략 가능하고 , AUTO_INCREMENT 되어 있으므로 값은 알아서 생성

desc test;                             # test 테이블 조회
SELECT * FROM test;                    # 데이터 조회(*은 모든 필드를 조회한다는뜻)
show table status                      # 테이블의 상태를 보여줌 

INSERT INTO test VALUES (15);          # 이미 있는값을 뺴고는 지정해서 추가도 가능하다 
delete from test where id = 101;       # test 테이블에서 id 가 101 인 것만 삭제(where을 안쓰면 전체 다 삭제)

alter table test AUTO_INCREMENT = 1 ;  # AUTO_INCREMENT에 대해 초기화 또는 시작번호 지정

set @count=0;
update test set id=@count:=@count+1;   # 데이터가 난잡한거 보기좋게 1부터 순서대로 정렬(거의 안씀)


#----------------------------table만들기-----------------------------------------------
create table table1(                   # 테이블 만들기
	column1 varchar(100),
	column2 varchar(100),
	column3 varchar(100)
);

insert into table1 (column1 , column2 , column3)values('a','aa','aaa');
# 테이블에 값 넣기
insert into table1 values('a','aa','aaa');                     # 모두 다 같은것으로 넣기
insert into table1 ( column1, column2 ) values ( 'b', 'bb' );  # 하나는 null로 채워짐

update table1 set column1 = 'z';                               # column1 값 수정(전체)
update table1 set column1 = 'x' where column2 ='aa';           #column2 가 aa인것만 colum1 x로 바꿔라 
update table1 set column1 ='y' , column2='yy' where column3 = 'aaa';

delete from table1 where column1 ='y';

# -----------------------------실습--------------------------------------
create table if not exists hojeong(
ipaddress varchar(16),
iptime_first datetime,
before_url varchar(250),
device_info varchar(40),
os_info varchar(40),
session_id varchar(80));


insert into hojeong(ipaddress,iptime_first,before_url,device_info)
values ( 'asdf','2023-02-23 11:33:29','localhost','pc'),
	   ( 'asdf','2023-02-23 11:33:29','localhost','iphone');

desc hojeong;

insert into hojeong(ipaddress,iptime_first,before_url,device_info)
values ( 'aaaaaaaaaaaaaaaaa','2023-02-23 11:33:29','localhost','pc');
 # 17개이면 16개 길이보다 길어서 못들어감 



데이터 가져올떄 
select * from tiltes limit 20:    -> 20개의 데이터만 가져온다


<각종 sql 연산자>
- between 연산자 - 
- where between 11133 11199 -> 11133 부터 11199 까지 포함되면 TRUE

- like 연산자 - 
- select column1 from table_name where column1 like pattern;

where column1 like 'a%'    -> a로 시작하는 모든값
where column1 like '%a'    -> a로 끝나는 모든값 
where column1 like '%or%' -> or 값이 포함되는값
where column1 like '_r%'    -> 앞에서 두번째 문자가 r인 모든값
where column1 like 'a_%'    -> 뒤에서 두번째 문자가 a인 모든값 
where column1 like 'a__%'   -> a로 시작하는 3글자 이상의 길이를 갖는 모든값
where column1 like 'a%o'    -> a로 시작하고 o로 끝나는 모든값

- in 연산자 (in 뒤에있는 값 비교하고 같은 값이 있으면 TRUE 반환)
- order by column1 asc/desc , column2 asc/desc (오름차순 또는 내림차순으로 정렬)
- SELECT 컴럼명 FROM 테이블명 WHERE 컬럼명 IS NULL; (NULL값 비교)
- SELECT 컬럼명 FROM 테이블명 WHERE 컬럼명 LIMIT number; (number만큼 불러오는거 제한)
- SELECT count 컬럼명 FROM 테이블명 WHERE condition; (함수 조건에 맞는 row 개수)
- SELECT avg 컬럼명 FROM 테이블명 WHERE condition; (수치형 평균 구하기)
- SELECT 컬럼명 FROM 테이블명 INNER JOIN 테이블명2 on 테이블명.컬럼명 = 테이블명2.컬럼명2
-> 테이블 간 서로 일치하는 row만 결합
- SELECT 컬럼명 FROM 테이블명 LEFT JOIN 테이블명2 on 테이블명.컬럼명 = 테이블명2.컬럼명2
-> 왼쪽을 기준으로 결합
- SELECT 컬럼명 FROM 테이블명 RIGHT JOIN 테이블명2 on 테이블명.컬럼명 = 테이블명2.컬럼명2
-> 왼쪽을 기준으로 결합

SELECT 칼럼명 FROM 테이블명1 UNION ALL SELECT 칼럼명 FROM 테이블명2 
-> 두개이상의 slelct 문의 결과 합침

SELECT 칼럼명 FROM 테이블명1 WHERE condition group by 컬럼명1 order by 컬럼명1 
-> 같은 값을 갖는 rows들을 그룹화

SELECT 컬럼명 FROM 테이블명 WHERE condition GROUP BY 컬럼명 HAVING condition ORDER BY 컬럼명;




